plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'war'
	id 'jacoco'
    id "org.sonarqube" version "2.7"
}

group = 'com.ceiba'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
apply plugin: 'jacoco'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext{
	mapstructVersion = "1.2.0.Final"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	// --- Mapstruct ---------------------------------
	compileOnly("org.mapstruct:mapstruct-jdk8:${mapstructVersion}")
   annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

compileJava {
   options.annotationProcessorPath = configurations.annotationProcessor

   // if you need to configure mapstruct component model
   options.compilerArgs << "-Amapstruct.defaultComponentModel=spring"
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
    reports {xml.enabled true}
}

sonarqube {
    properties {
        property "sonar.sources", "src/main/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.tests", "src/test/java"
        property "sonar.test.binaries", "build/classes/java/test"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacocoTestReport.xml"
        property "sonar.junit.reportPaths", "build/test-results/test"
    }
}
